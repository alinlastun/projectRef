apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"

    implementation "androidx.core:core-ktx:$versions.androidx_core"
    implementation "androidx.arch.core:core-runtime:$versions.androidx_core_runtime"

    api "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$versions.retrofit_serialization"
    implementation "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    api "com.jakewharton.timber:timber:$versions.timber"

    api("com.crashlytics.sdk.android:crashlytics:$versions.fabric") {
        transitive = true
    }

    api "com.google.dagger:dagger:$versions.dagger"
    api "com.google.dagger:dagger-android:$versions.dagger"
    api "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle_coroutines"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle_coroutines"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle_coroutines"

    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    api "androidx.room:room-runtime:$versions.room"
    kapt "androidx.room:room-compiler:$versions.room"
    implementation "androidx.room:room-ktx:$versions.room"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$versions.kotlin_serialization"

    // Testing
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions.junit"
    testImplementation "com.natpryce:hamkrest:$versions.hamkrest"
    testImplementation "io.mockk:mockk:$versions.mockk"
    testImplementation "androidx.arch.core:core-testing:$versions.core_testing"

    androidTestImplementation "androidx.arch.core:core-testing:$versions.core_testing"
    androidTestImplementation "androidx.test.ext:junit:$versions.junit_ext"
    androidTestImplementation "androidx.test:runner:$versions.test_runner"
    androidTestImplementation "androidx.test:rules:$versions.test_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"
}
